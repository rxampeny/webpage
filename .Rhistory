rsconnect::setAccountInfo(name='testestestest',
token='E1CEA1E854A1F8477B6EEC82FD2D924B',
secret='PxIZjp04IarZh0jdB+MhKO0Rtn6ZYpQGPsFztZQG')
# Carga la biblioteca httr
library(httr)
# Configura tu clave de API
api_key <- "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"
# Define la función para obtener una respuesta
get_response <- function(prompt) {
# Crea el cuerpo de la solicitud
body <- list(
model = "gpt-3.5-turbo",
messages = list(list("role" = "user", "content" = prompt)),
temperature = 0
)
# Realiza la solicitud POST
response <- POST(
url = "https://api.openai.com/v1/chat/completions",
body = toJSON(body),
add_headers(`Authorization` = paste("Bearer", api_key), `Content-Type` = "application/json")
)
# Obtiene el contenido de la respuesta
content <- content(response, "parsed")
# Devuelve el mensaje de la respuesta
return(content$choices[[1]]$message$content)
}
# Prueba la función con tu prompt
response <- get_response("Write a poem about ChatGPT")
print(response)
# Prueba la función con tu prompt
response <- get_response("Write a poem about ChatGPT")
# Define la función para obtener una respuesta
get_response <- function(prompt) {
# Crea el cuerpo de la solicitud
body <- list(
model = "gpt-3.5-turbo",
messages = list(list("role" = "user", "content" = prompt)),
temperature = 0
)
# Realiza la solicitud POST
response <- POST(
url = "https://api.openai.com/v1/chat/completions",
body = toJSON(body),
add_headers(`Authorization` = paste("Bearer", api_key), `Content-Type` = "application/json")
)
# Obtiene el contenido de la respuesta
content <- content(response, "parsed")
# Devuelve el mensaje de la respuesta
return(content$choices[[1]]$message$content)
}
# Prueba la función con tu prompt
response <- get_response("Write a poem about ChatGPT")
# Carga la biblioteca httr
library(httr)
library(jsonlite)
# Configura tu clave de API
api_key <- "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"
# Define la función para obtener una respuesta
get_response <- function(prompt) {
# Crea el cuerpo de la solicitud
body <- list(
model = "gpt-3.5-turbo",
messages = list(list("role" = "user", "content" = prompt)),
temperature = 0
)
# Realiza la solicitud POST
response <- POST(
url = "https://api.openai.com/v1/chat/completions",
body = toJSON(body),
add_headers(`Authorization` = paste("Bearer", api_key), `Content-Type` = "application/json")
)
# Obtiene el contenido de la respuesta
content <- content(response, "parsed")
# Devuelve el mensaje de la respuesta
return(content$choices[[1]]$message$content)
}
# Prueba la función con tu prompt
response <- get_response("Write a poem about ChatGPT")
print(response)
# Prueba la función con tu prompt
response <- get_response("Write a poem about ChatGPT")
print(response)
# Carga la biblioteca httr
library(httr)
library(jsonlite)
# Configura tu clave de API
api_key <- "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"
n
# Prueba la función con tu prompt
response <- get_response("Write a poem about ChatGPT")
print(response)
# Carga las bibliotecas necesarias
library(httr)
library(jsonlite) # Asegúrate de cargar jsonlite para utilizar toJSON
# Configura tu clave de API
api_key <- "<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>"
# Define la función para obtener una respuesta
get_response <- function(prompt) {
# Crea el cuerpo de la solicitud
body <- list(
model = "gpt-3.5-turbo",
messages = list(list(role = "user", content = prompt)),
temperature = 0
)
# Realiza la solicitud POST
response <- POST(
url = "https://api.openai.com/v1/chat/completions",
body = toJSON(body),
add_headers(`Authorization` = paste("Bearer", api_key), `Content-Type` = "application/json")
)
# Verifica el estado de la respuesta
if (status_code(response) != 200) {
print(paste("Error:", status_code(response)))
print(content(response, "text"))
return(NULL)
}
# Obtiene el contenido de la respuesta
content <- content(response, "parsed")
# Devuelve el mensaje de la respuesta
return(content$choices[[1]]$message$content)
}
# Prueba la función con tu prompt
response <- get_response("Write a poem about ChatGPT")
# Configura tu clave de API
api_key <- "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"
# Define la función para obtener una respuesta
get_response <- function(prompt) {
# Crea el cuerpo de la solicitud
body <- list(
model = "gpt-3.5-turbo",
messages = list(list(role = "user", content = prompt)),
temperature = 0
)
# Realiza la solicitud POST
response <- POST(
url = "https://api.openai.com/v1/chat/completions",
body = toJSON(body),
add_headers(`Authorization` = paste("Bearer", api_key), `Content-Type` = "application/json")
)
# Verifica el estado de la respuesta
if (status_code(response) != 200) {
print(paste("Error:", status_code(response)))
print(content(response, "text"))
return(NULL)
}
# Obtiene el contenido de la respuesta
content <- content(response, "parsed")
# Devuelve el mensaje de la respuesta
return(content$choices[[1]]$message$content)
}
# Prueba la función con tu prompt
response <- get_response("Write a poem about ChatGPT")
# Carga las bibliotecas necesarias
library(httr)
library(jsonlite) # Utilizado para la conversión a JSON
# Configura tu clave de API
api_key <- "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"
# Define la función para obtener una respuesta
get_response <- function(prompt) {
# Crea el cuerpo de la solicitud como una lista
body_list <- list(
model = "gpt-3.5-turbo",
messages = list(list(role = "user", content = prompt)),
temperature = 0
)
# Convierte el cuerpo de la solicitud a una cadena JSON
body_json <- toJSON(body_list, auto_unbox = TRUE)
# Realiza la solicitud POST
response <- POST(
url = "https://api.openai.com/v1/chat/completions",
body = body_json,
add_headers(`Authorization` = paste("Bearer", api_key), `Content-Type` = "application/json"),
encode = "json" # Asegura que httr sepa que está enviando JSON
)
# Verifica el estado de la respuesta
if (status_code(response) != 200) {
print(paste("Error:", status_code(response)))
print(content(response, "text", encoding = "UTF-8"))
return(NULL)
}
# Obtiene y devuelve el contenido de la respuesta
content <- content(response, "parsed")
return(content$choices[[1]]$message$content)
}
# Configura tu OPENAI_TOKEN antes de llamar a esta función
response <- get_response("Write a poem about ChatGPT")
print(response)
# Cargar la biblioteca reticulate
library(reticulate)
# Usar reticulate para ejecutar código Python
py_run_string("
import openai
# Set your API key
openai.api_key = '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'
def get_response(prompt):
# Create a request to the chat completions endpoint
response = openai.ChatCompletion.create(
model='gpt-3.5-turbo',
# Assign the role and content for the message
messages=[{'role': 'user', 'content': prompt}],
temperature=0)
return response.choices[0].message['content']
# Test the function with your prompt
response = get_response('Write a poem about ChatGPT')
print(response)
")
library(reticulate)
py_config()
reticulate::py_install("openai")
# Cargar la biblioteca reticulate
library(reticulate)
# Usar reticulate para ejecutar código Python
py_run_string("
import openai
# Set your API key
openai.api_key = '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'
def get_response(prompt):
# Create a request to the chat completions endpoint
response = openai.ChatCompletion.create(
model='gpt-3.5-turbo',
# Assign the role and content for the message
messages=[{'role': 'user', 'content': prompt}],
temperature=0)
return response.choices[0].message['content']
# Test the function with your prompt
response = get_response('Write a poem about ChatGPT')
print(response)
")
# Cargar la biblioteca reticulate
library(reticulate)
# Usar reticulate para ejecutar código Python
py_run_string("
import openai
# Set your API key
openai.api_key = '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'
def get_response(prompt):
# Create a request to the chat completions endpoint
response = openai.ChatCompletion.create(
model='gpt-3.5-turbo',
# Assign the role and content for the message
messages=[{'role': 'user', 'content': prompt}],
temperature=0)
return response.choices[0].message['content']
# Test the function with your prompt
response = get_response('Write a poem about ChatGPT')
print(response)
")
reticulate::py_last_error()
